/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnderMaintenanceRouteImport } from './routes/under-maintenance'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout.index'
import { Route as LayoutSearchNameRouteImport } from './routes/_layout.search.$name'

const UnderMaintenanceRoute = UnderMaintenanceRouteImport.update({
  id: '/under-maintenance',
  path: '/under-maintenance',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSearchNameRoute = LayoutSearchNameRouteImport.update({
  id: '/search/$name',
  path: '/search/$name',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/under-maintenance': typeof UnderMaintenanceRoute
  '/': typeof LayoutIndexRoute
  '/search/$name': typeof LayoutSearchNameRoute
}
export interface FileRoutesByTo {
  '/under-maintenance': typeof UnderMaintenanceRoute
  '/': typeof LayoutIndexRoute
  '/search/$name': typeof LayoutSearchNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/under-maintenance': typeof UnderMaintenanceRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/search/$name': typeof LayoutSearchNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/under-maintenance' | '/' | '/search/$name'
  fileRoutesByTo: FileRoutesByTo
  to: '/under-maintenance' | '/' | '/search/$name'
  id:
    | '__root__'
    | '/_layout'
    | '/under-maintenance'
    | '/_layout/'
    | '/_layout/search/$name'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  UnderMaintenanceRoute: typeof UnderMaintenanceRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/under-maintenance': {
      id: '/under-maintenance'
      path: '/under-maintenance'
      fullPath: '/under-maintenance'
      preLoaderRoute: typeof UnderMaintenanceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/search/$name': {
      id: '/_layout/search/$name'
      path: '/search/$name'
      fullPath: '/search/$name'
      preLoaderRoute: typeof LayoutSearchNameRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutSearchNameRoute: typeof LayoutSearchNameRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutSearchNameRoute: LayoutSearchNameRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  UnderMaintenanceRoute: UnderMaintenanceRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
